/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.2/userguide/custom_plugins.html
 */

buildscript {
    ext {
        projectVersion = "0.1"
    }
    repositories {
        flatDir { dirs "$buildDir/libs" }
        jcenter()
    }
//    TODO: Uncomment this line after first build to use the plugin
    dependencies {
//         classpath name: "DockerGradlePlugin-${projectVersion}"
//         classpath name: "plugin-0.1"
    }
}

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'
}

//apply plugin: 'io.github.DawidC.gradle.docker.greeting'

version projectVersion

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {
    // Use the awesome Spock testing and specification framework
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
}

gradlePlugin {
    // Define the plugin
    plugins {
        greeting {
            id = 'io.github.DawidC.gradle.docker.greeting'
            implementationClass = 'io.github.DawidC.gradle.docker.DockerGradlePlugin'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.register("checkIfDockerIsInstalledAndRunning"){
    exec{
        commandLine 'docker info'
    }
}
